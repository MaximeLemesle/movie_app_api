// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieAppApi.Src.Core.Repositories;

#nullable disable

namespace MovieAppApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241129084159_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("MovieAppApi.Src.Core.Repositories.Entities.MovieEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieAppApi.Src.Core.Repositories.Entities.PlaylistEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("MovieAppApi.Src.Core.Repositories.Entities.PlaylistJoinMovieEntity", b =>
                {
                    b.Property<int>("PlaylistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("PlaylistId", "MovieId");

                    b.HasIndex("MovieId");

                    b.ToTable("PlaylistJoinMovies");
                });

            modelBuilder.Entity("MovieAppApi.Src.Core.Repositories.Entities.PlaylistJoinMovieEntity", b =>
                {
                    b.HasOne("MovieAppApi.Src.Core.Repositories.Entities.MovieEntity", "Movie")
                        .WithMany("PlaylistJoinMovies")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieAppApi.Src.Core.Repositories.Entities.PlaylistEntity", "Playlist")
                        .WithMany("PlaylistJoinMovies")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("MovieAppApi.Src.Core.Repositories.Entities.MovieEntity", b =>
                {
                    b.Navigation("PlaylistJoinMovies");
                });

            modelBuilder.Entity("MovieAppApi.Src.Core.Repositories.Entities.PlaylistEntity", b =>
                {
                    b.Navigation("PlaylistJoinMovies");
                });
#pragma warning restore 612, 618
        }
    }
}
